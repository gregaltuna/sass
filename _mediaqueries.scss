/////////////////////
//                 //
//  GRID SETTINGS  //
//                 //
/////////////////////
//
// this is 1/2 the actual gutter width. It applies the gutter width to margin and padding on both sides of the .col selector.
//
$gutter:	10px;
$mgutter:	5px;

///////////////////
//               //
//  BREAKPOINTS  //
//               //
///////////////////
// $small:		770px;  LEGACY
// $medium:	980px;  LEGACY
// $large:		1200px  LEGACY;
// $xlarge:	1600px  LEGACY;
$xsmall:	360px;
$small:		600px;
$medium:	900px;
$large:		1200px;
$xlarge:	1800px;

/////////////////////
//                 //
//  MEDIA QUERIES  //
//                 //
/////////////////////
@mixin xsmall {
	@media only screen and (max-width: $xsmall) {
		@content;
	}
}

@mixin xsmall-land {
	@media only screen and (max-width: 480px) and (orientation: landscape) {
		@content;
	}
}

@mixin mobile {
	@media only screen and (max-width: #{$small - 1px}) {
		@content;
	}
}

@mixin mobile-land {
	@media only screen and (max-width: 736px) and (orientation: landscape) {
		@content;
	}
}

@mixin desktop {
	@media only screen and (min-width: #{$small}) {
		@content;
	}
}

@mixin small {
  @media only screen and (min-width: #{$small}) and (max-width: #{$medium - 1}) {
    @content;
  }
}

@mixin small-down {
  @media only screen and (max-width: #{$medium - 1}) {
    @content;
  }
}

@mixin small-up {
  @media only screen and (min-width: #{$small}) {
    @content;
  }
}

@mixin medium {
  @media only screen and (min-width: #{$medium}) and (max-width: #{$large - 1}) {
    @content;
  }
}

@mixin medium-down {
  @media only screen and (max-width: #{$large - 1}) {
    @content;
  }
}

@mixin medium-up {
  @media only screen and (min-width: #{$medium}) {
    @content;
  }
}

@mixin large {
  // UNCOMMENT IF USING X-LARGE BREAKPOINT: @media only screen and (min-width: #{$large}) and (max-width: #{$xlarge - 1}) {
  @media only screen and (min-width: #{$large}) {
    @content;
  }
}

@mixin large-down {
  @media only screen and (max-width: #{$xlarge - 1}) {
    @content;
  }
}

@mixin large-up {
	@media only screen and (min-width: #{$large}) {
		@content;
	}
}

@mixin xlarge {
	@media only screen and (min-width: #{$xlarge}) {
		@content;
	}
}

////////////////////////////////////////////
//                                        //
//  ADDED FOR XLARGE AND XXLARGE QUERIES  //
//                                        //
////////////////////////////////////////////
@media only screen and (min-width: 90.063em) {
	.xlarge-block-grid-1 > li {
		width: 100%;
		list-style: none;
	}

	.xlarge-block-grid-1 > li:nth-of-type(n) { clear: none; }
	.xlarge-block-grid-1 > li:nth-of-type(1n+1) { clear: both; }

  .xlarge-block-grid-2 > li {
		width: 50%;
		list-style: none;
	}

	.xlarge-block-grid-2 > li:nth-of-type(n) { clear: none; }
	.xlarge-block-grid-2 > li:nth-of-type(2n+1) { clear: both; }

  .xlarge-block-grid-3 > li {
		width: 33.33333%;
		list-style: none;
	}

	.xlarge-block-grid-3 > li:nth-of-type(n) { clear: none; }
	.xlarge-block-grid-3 > li:nth-of-type(3n+1) { clear: both; }

  .xlarge-block-grid-4 > li {
		width: 25%;
		list-style: none;
	}

	.xlarge-block-grid-4 > li:nth-of-type(n) { clear: none; }
	.xlarge-block-grid-4 > li:nth-of-type(4n+1) { clear: both; }

  .xlarge-block-grid-5 > li {
		width: 20%;
		list-style: none;
	}

  .xlarge-block-grid-5 > li:nth-of-type(n) { clear: none; }
  .xlarge-block-grid-5 > li:nth-of-type(5n+1) { clear: both; }

  .xlarge-block-grid-6 > li {
		width: 16.66667%;
		list-style: none;
	}

	.xlarge-block-grid-6 > li:nth-of-type(n) { clear: none; }
	.xlarge-block-grid-6 > li:nth-of-type(6n+1) { clear: both; }

  .xlarge-block-grid-7 > li {
		width: 14.28571%;
		list-style: none;
	}

	.xlarge-block-grid-7 > li:nth-of-type(n) { clear: none; }
	.xlarge-block-grid-7 > li:nth-of-type(7n+1) { clear: both; }

  .xlarge-block-grid-8 > li {
		width: 12.5%;
		list-style: none;
	}

	.xlarge-block-grid-8 > li:nth-of-type(n) { clear: none; }
	.xlarge-block-grid-8 > li:nth-of-type(8n+1) { clear: both; }

  .xlarge-block-grid-9 > li {
		width: 11.11111%;
		list-style: none;
	}

	.xlarge-block-grid-9 > li:nth-of-type(n) { clear: none; }
	.xlarge-block-grid-9 > li:nth-of-type(9n+1) { clear: both; }

  .xlarge-block-grid-10 > li {
		width: 10%;
		list-style: none;
	}

	.xlarge-block-grid-10 > li:nth-of-type(n) { clear: none; }
	.xlarge-block-grid-10 > li:nth-of-type(10n+1) { clear: both; }

  .xlarge-block-grid-11 > li {
		width: 9.09091%;
		list-style: none;
	}

	.xlarge-block-grid-11 > li:nth-of-type(n) { clear: none; }
	.xlarge-block-grid-11 > li:nth-of-type(11n+1) { clear: both; }

  .xlarge-block-grid-12 > li {
		width: 8.33333%;
		list-style: none;
	}

	.xlarge-block-grid-12 > li:nth-of-type(n) { clear: none; }
	.xlarge-block-grid-12 > li:nth-of-type(12n+1) { clear: both; }
}

@media only screen and (min-width: 120.063em) {
  .xxlarge-block-grid-1 > li {
		width: 100%;
		list-style: none;
	}

	.xxlarge-block-grid-1 > li:nth-of-type(n) { clear: none; }
	.xxlarge-block-grid-1 > li:nth-of-type(1n+1) { clear: both; }

  .xxlarge-block-grid-2 > li {
		width: 50%;
		list-style: none;
	}

	.xxlarge-block-grid-2 > li:nth-of-type(n) { clear: none; }
	.xxlarge-block-grid-2 > li:nth-of-type(2n+1) { clear: both; }

  .xxlarge-block-grid-3 > li {
		width: 33.33333%;
		list-style: none;
	}

	.xxlarge-block-grid-3 > li:nth-of-type(n) {	clear: none; }
	.xxlarge-block-grid-3 > li:nth-of-type(3n+1) { clear: both; }

  .xxlarge-block-grid-4 > li {
		width: 25%;
		list-style: none;
	}

	.xxlarge-block-grid-4 > li:nth-of-type(n) {	clear: none; }
	.xxlarge-block-grid-4 > li:nth-of-type(4n+1) { clear: both; }

  .xxlarge-block-grid-5 > li {
		width: 20%;
		list-style: none;
	}

	.xxlarge-block-grid-5 > li:nth-of-type(n) { clear: none; }
	.xxlarge-block-grid-5 > li:nth-of-type(5n+1) { clear: both; }

  .xxlarge-block-grid-6 > li {
    width: 16.66667%;
    list-style: none;
  }

	.xxlarge-block-grid-6 > li:nth-of-type(n) { clear: none; }
	.xxlarge-block-grid-6 > li:nth-of-type(6n+1) { clear: both; }

  .xxlarge-block-grid-7 > li {
		width: 14.28571%;
		list-style: none;
	}

	.xxlarge-block-grid-7 > li:nth-of-type(n) { clear: none; }
	.xxlarge-block-grid-7 > li:nth-of-type(7n+1) { clear: both; }

  .xxlarge-block-grid-8 > li {
		width: 12.5%;
		list-style: none;
	}

	.xxlarge-block-grid-8 > li:nth-of-type(n) { clear: none; }
	.xxlarge-block-grid-8 > li:nth-of-type(8n+1) { clear: both; }

  .xxlarge-block-grid-9 > li {
		width: 11.11111%;
		list-style: none;
	}

	.xxlarge-block-grid-9 > li:nth-of-type(n) { clear: none; }
	.xxlarge-block-grid-9 > li:nth-of-type(9n+1) { clear: both; }

  .xxlarge-block-grid-10 > li {
		width: 10%;
		list-style: none;
	}

	.xxlarge-block-grid-10 > li:nth-of-type(n) { clear: none; }
	.xxlarge-block-grid-10 > li:nth-of-type(10n+1) { clear: both; }

  .xxlarge-block-grid-11 > li {
		width: 9.09091%;
		list-style: none;
	}

	.xxlarge-block-grid-11 > li:nth-of-type(n) { clear: none; }
	.xxlarge-block-grid-11 > li:nth-of-type(11n+1) { clear: both; }

  .xxlarge-block-grid-12 > li {
		width: 8.33333%;
		list-style: none;
	}

	.xxlarge-block-grid-12 > li:nth-of-type(n) { clear: none; }
	.xxlarge-block-grid-12 > li:nth-of-type(12n+1) { clear: both; }
}

// Add support for xlarge and xxlarge block grid
// @for $i from 1 through $block-grid-elements {
//   @media #{$xlarge-up} {
//     .xlarge-block-grid-#{$i} {
//       @include block-grid(
//         $per-row: $i
//       );
//     }
//   }
//
//   @media #{$xxlarge-up} {
//     .xxlarge-block-grid-#{$i} {
//       @include block-grid(
//         $per-row: $i
//       );
//     }
//   }
// }
